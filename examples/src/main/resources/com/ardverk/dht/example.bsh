import com.ardverk.dht.*;
import com.ardverk.dht.codec.*;
import com.ardverk.dht.codec.bencode.*;
import com.ardverk.dht.concurrent.*;
import com.ardverk.dht.config.*;
import com.ardverk.dht.entity.*;
import com.ardverk.dht.event.*;
import com.ardverk.dht.io.*;
import com.ardverk.dht.io.transport.*;
import com.ardverk.dht.lang.*;
import com.ardverk.dht.logging.*;
import com.ardverk.dht.message.*;
import com.ardverk.dht.routing.*;
import com.ardverk.dht.security.*;
import com.ardverk.dht.storage.*;
import com.ardverk.dht.utils.*;
import com.ardverk.dht.ui.*;

import org.ardverk.coding.*;
import org.ardverk.collection.*;
import org.ardverk.concurrent.*;
import org.ardverk.io.*;
import org.ardverk.lang.*;
import org.ardverk.net.*;
import org.ardverk.security.*;
import org.ardverk.utils.*;
import java.security.*;

// Make everything accessible!
setAccessibility(true);
print("\nHello, please type example(); and press Enter. For further instructions and examples see 'example.bsh' and www.beanshell.org.\n");

java.util.List dhts = null;
com.ardverk.dht.DHT current = null;

create(int count, int port) {
	return ArdverkUtils.createDHTs(count, port);
}

dht(int index) {
	return dhts.get(index);
}

bootstrap() {
	ArdverkUtils.bootstrap(dhts);
}

refresh() {
	ArdverkUtils.refresh(dhts);
}

put(String keyValue) {
	put(keyValue, keyValue);
}

put(String key, String value) {
	put(current, key, value);
}

put(DHT dht, String key, String value) {
	ArdverkFuture future = dht.put(
		kuid(key), StringUtils.getBytes(value), 
		new DefaultPutConfig());
		
	StoreEntity entity = future.get();
	for (StoreResponse response : entity.getStoreResponses()) {
		print("PUT: " + response.getContact().getId() + " -> " + response.getCondition());
	}
}

get(String key) {
	return get(current, key);
}

get(DHT dht, String key) {
	ArdverkFuture future = dht.get(kuid(key), new DefaultGetConfig());
	
	ValueEntity entity = future.get();
	byte[] value = entity.getValue();
	
	print("GET: " + entity.getId() + " (" + key + ")" + " -> " 
		+ StringUtils.toString(value)
		+ "\n SENDER: " + entity.getSender().getId()
		+ "\n CREATOR: " + entity.getCreator().getId()
		+ "\n TIME: " + entity.getTimeInMillis() + "ms");
		
	return StringUtils.toString(value);
}

kuid(String value) {
	return KUID.create(hash(value));
}

hash(String value) {
	MessageDigest md = MessageDigestUtils.createSHA1();
	md.update(StringUtils.getBytes(value));
	return md.digest();
}

createUI() {
	return createUI(current);
}

createUI(DHT dht) {
	PainterFrame frame = new PainterFrame(dht);
	frame.setTitle(dht.getLocalhost().getId().toString());
	frame.setVisible(true);
	frame.start();
	return frame;
}

close() {
	IoUtils.closeAll(dhts);
}

quit() {
	close();
	System.exit(0);
}

example() {
	INSTANCE_COUNT = 256;
	INITIAL_PORT = 2000;

	print("Creating DHTs...");
	dhts = create(INSTANCE_COUNT, INITIAL_PORT);
	current = dht(0);

	print("Creating UI for the first DHT instance...");
	frame = createUI();

	print("Bootstrapping all DHTs...");
	bootstrap();

	print("\nStoring a Key-Value...");
	put("Hello", "World");

	print("\nGetting a Key-Value...");
	get("Hello");
	
	print("\nTry also storeLoop(count);...");
}

storeLoop(int count) {
	for(int i = 0; i < count; i++) {
		String key = "Key-" + i;
		String value1 = "Value-" + i;
		put(key, value1);
		
		String value2 = get(key);
		if (!value1.equals(value2)) {
			throw new IllegalStateException(value1 + ", " + value2);
		}
	}
}

sync() {
	for (DHT dht : dhts) {
		dht.sync(new DefaultSyncConfig()).get();
	}
}

java.util.List nu = null;
forward(int count, int port) {
	nu = create(count, port);
	nu.get(0).ping("localhost", 2000, new DefaultPingConfig());
	createUI(nu.get(0));
	ArdverkUtils.bootstrap(nu);
}

node(String hex) {
	KUID id = KUID.createWithHexString(hex);
	if (dhts != null) {
		for (DHT dht : dhts) {
			if (dht.getLocalhost().getId().equals(id)) {
				return dht;
			}
		}
	}
	
	if (nu != null) {
		for (DHT dht : nu) {
			if (dht.getLocalhost().getId().equals(id)) {
				return dht;
			}
		}
	}
	
	return null;
}

