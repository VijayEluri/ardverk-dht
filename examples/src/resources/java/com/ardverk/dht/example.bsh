import com.ardverk.dht.*;
import com.ardverk.dht.codec.*;
import com.ardverk.dht.codec.bencode.*;
import com.ardverk.dht.concurrent.*;
import com.ardverk.dht.config.*;
import com.ardverk.dht.entity.*;
import com.ardverk.dht.event.*;
import com.ardverk.dht.io.*;
import com.ardverk.dht.io.transport.*;
import com.ardverk.dht.lang.*;
import com.ardverk.dht.logging.*;
import com.ardverk.dht.message.*;
import com.ardverk.dht.routing.*;
import com.ardverk.dht.security.*;
import com.ardverk.dht.storage.*;
import com.ardverk.dht.utils.*;
import com.ardverk.dht.ui.*;

import org.ardverk.coding.*;
import org.ardverk.collection.*;
import org.ardverk.concurrent.*;
import org.ardverk.io.*;
import org.ardverk.lang.*;
import org.ardverk.net.*;
import org.ardverk.security.*;
import org.ardverk.utils.*;
import java.security.*;

java.util.List dhts = null;
DHT current = null;

create(int count, int port) {
	return ArdverkUtils.createDHTs(count, port);
}

dht(int index) {
	return dhts.get(index);
}

bootstrap() {
	ArdverkUtils.bootstrap(dhts);
}

refresh() {
	ArdverkUtils.refresh(dhts);
}

put(String keyValue) {
	put(keyValue, keyValue);
}

put(String key, String value) {
	ArdverkFuture future = current.put(
		KUID.create(hash(key)), 
		StringUtils.getBytes(value), 
		new DefaultPutConfig());
		
	StoreEntity entity = future.get();
	for (StoreResponse response : entity.getStoreResponses()) {
		print("PUT: " + response.getContact().getId() + " -> " + response.getCondition());
	}
}

get(String key) {
	ArdverkFuture future = current.get(
		KUID.create(hash(key)), new DefaultGetConfig());
	
	ValueEntity entity = future.get();
	byte[] value = entity.getValue();
	
	print("GET: " + entity.getId() + " -> " 
		+ StringUtils.toString(value)
		+ "\n SENDER: " + entity.getSender().getId()
		+ "\n CREATOR: " + entity.getCreator().getId()
		+ "\n TIME: " + entity.getTimeInMillis() + "ms");
}

hash(String value) {
	MessageDigest md = MessageDigestUtils.createSHA1();
	md.update(StringUtils.getBytes(value));
	return md.digest();
}

close() {
	IoUtils.closeAll(dhts);
}

INSTANCE_COUNT = 256;
INITIAL_PORT = 2000;

print("Creating DHTs...");
dhts = create(INSTANCE_COUNT, INITIAL_PORT);
current = dht(0);

print("Creating UI for first DHT instance...");
frame = new PainterFrame(current);
frame.setVisible(true);
frame.start();

print("Bootstrapping all DHTs...");
bootstrap();

print("\nStoring a Key-Value...");
put("Hello", "World");

print("\nGetting a Key-Value...");
get("Hello");

rnd = (int)(Math.random() * (dhts.size()-1));
print("\nSwithcing to DHT instance #" + rnd);
current = dht(rnd);

print("\nGetting the same Key-Value through DHT instance #" + rnd);
get("Hello");

