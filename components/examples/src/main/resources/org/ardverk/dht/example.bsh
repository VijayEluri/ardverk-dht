import org.ardverk.dht.*;
import org.ardverk.dht.codec.*;
import org.ardverk.dht.codec.bencode.*;
import org.ardverk.dht.concurrent.*;
import org.ardverk.dht.config.*;
import org.ardverk.dht.entity.*;
import org.ardverk.dht.event.*;
import org.ardverk.dht.io.*;
import org.ardverk.dht.io.transport.*;
import org.ardverk.dht.lang.*;
import org.ardverk.dht.logging.*;
import org.ardverk.dht.message.*;
import org.ardverk.dht.routing.*;
import org.ardverk.dht.security.*;
import org.ardverk.dht.storage.*;
import org.ardverk.dht.utils.*;
import org.ardverk.dht.ui.*;
import org.ardverk.dht.rsrc.*;

import org.ardverk.dht.http.*;

import org.ardverk.coding.*;
import org.ardverk.collection.*;
import org.ardverk.concurrent.*;
import org.ardverk.io.*;
import org.ardverk.lang.*;
import org.ardverk.net.*;
import org.ardverk.security.*;
import org.ardverk.utils.*;
import java.security.*;

import java.util.concurrent.*;

// Make everything accessible!
setAccessibility(true);

// A global list of DHT instances and the currently
// selected instance which is used by put(), get()...
java.util.List dhts = new ArrayList();
int current = 0;

// Creates a DHT that is bound to the given port
createDHT(int port) {
	
	Builder builder = Builder.sha1();
	DHT dht = builder.newDHT(port);
	
	MessageCodec codec = new BencodeMessageCodec();
	dht.bind(new DatagramTransport(codec, port));
	//dht.bind(new SocketTransport(codec, port));
	//dht.bind(new HybridTransport(codec, port));
	//dht.bind(new HttpTransport(port));
	
	return dht;
}

// Creates a list of DHTs
createDHTs(int count, int port) {
	java.util.List list = new ArrayList();
	for (i = 0; i < count; i++) {
		try {
			list.add(createDHT(port+i));
		} catch (IOException err) {
			err.printStackTrace();
		}
	}
	
	dhts.addAll(list);
	return list;
}

// Bootstraps a list of DHTs
bootstrapAll() {
	DHT first = dhts.get(0);
	
	for (DHT dht : dhts) {
		if (dht != first) {
			dht.bootstrap(first.getLocalhost(), null).get();
		}
	}
	
	first.getRouteTable().clear();
	first.bootstrap(dhts.get(1).getLocalhost(), null).get();
}

bootstrapAll(String address, int port) {
	for (DHT dht : dhts) {
		dht.bootstrap(address, port, null).get();
	}
}

// Calls quicken() on a list of DHTs
quicken() {
	for (DHT dht : dhts) {
		dht.quicken(null).get();
	}
}

// Calls sync() on a list of DHTs
sync() {
	for (DHT dht : dhts) {
		dht.sync().get();
	}
}

// Creates a UI for a DHT
ui(DHT dht) {
	PainterFrame frame = new PainterFrame(dht);
	
	Contact localhost = dht.getLocalhost();
	frame.setTitle(localhost.getId() + ":" + localhost.getSocketAddress().getPort());
	frame.setVisible(true);
	frame.start();
	return frame;
}

// Stores the given key-value
put(String keyValue) {
	put(keyValue, keyValue);
}

// Stores the given key-value
put(String key, String value) {
	put(dhts.get(current), key, value);
}

// Stores the given key-value
put(DHT dht, String key, String value) {
	DHTFuture future = dht.put(toKey(key), toValue(value), null);
		
	PutEntity entity = future.get();
	for (StoreResponse response : entity.getStoreResponses()) {
	  	//org.ardverk.dht.storage.Response status = org.ardverk.dht.storage.Response.valueOf(response.getValue());
		org.ardverk.dht.rsrc.StringValue status = org.ardverk.dht.rsrc.ValueUtils.valueOf(
			org.ardverk.dht.rsrc.StringValue.class, response.getValue());
		print("PUT: " + response.getContact().getId() + " -> " + status);
	}
}

// Retrieves the given key-value
get(String key) {
	return get(dhts.get(current), key);
}

// Retrieves the given key-value
get(DHT dht, String key) {
	DHTFuture future = dht.get(toKey(key), null);
	
	org.ardverk.dht.entity.ValueEntity entity = future.get();
	//org.ardverk.dht.storage.Response value = org.ardverk.dht.storage.Response.valueOf(entity.getValue());
	org.ardverk.dht.rsrc.StringValue value = org.ardverk.dht.rsrc.ValueUtils.valueOf(
		org.ardverk.dht.rsrc.StringValue.class, entity.getValue());
	
	KUID senderId = entity.getSender().getId();
	KUID creatorId = null;
	
	print("GET: " + entity.getId() + " (" + key + ")" + " -> " 
		+ value
		+ "\n SENDER: " + senderId
		+ "\n CREATOR: " + creatorId
		+ "\n TIME: " + entity.getTimeInMillis() + "ms");
		
	return value;
}

toKey(String key) {
  //return org.ardverk.dht.rsrc.KeyFactory.parseKey("ardverk:///bucket/" + key);
	return org.ardverk.dht.rsrc.KeyFactory.parseKey("ardverk:///" + key);
}

toValue(String value) {
  	//byte[] raw = StringUtils.getBytes(value);
  	//byte[] data = new byte[1024 * 1024];
  	//System.arraycopy(raw, 0, data, 0, raw.length);
	//return new org.ardverk.dht.storage.message.DefaultRequest(dhts.get(current).getLocalhost(), new ByteArrayValueEntity(StringUtils.getBytes(value)));
	return new org.ardverk.dht.rsrc.StringValue(value);
}

// Closes all DHTs
close() {
	IoUtils.closeAll(dhts);
	dhts.clear();
	current = 0;
}

// Quit
quit() {
	close();
	System.exit(0);
}

//
// --- EXAMPLES ---
//

print("\nHello, please type init(); and press Enter. For further instructions and examples see 'example.bsh' and www.beanshell.org.\n");

boot() {
	INSTANCE_COUNT = 256;
	boot(INSTANCE_COUNT);
}

boot(int count) {
	init("ec2-107-20-29-203.compute-1.amazonaws.com", 13000, count, false);
}

init() {
	INITIAL_PORT = 13000;
	
	//INSTANCE_COUNT = 256;
	//INSTANCE_COUNT = 30;
	INSTANCE_COUNT = 1;
	
	init("localhost", INITIAL_PORT, INSTANCE_COUNT, true);
}

init(String host, int port, int count, boolean withUI) {
	print("Creating DHTs...");
	createDHTs(count, port);
	
	if (withUI) {
		print("Creating UI for the first DHT instance...");
		ui(dhts.get(current));
	}

	print("Bootstrapping all DHTs...");
	if (host.equals("localhost")) {
		bootstrapAll();
	} else {
		bootstrapAll(host, port);
	}

	quicken();
  
	print("\nStoring a Key-Value...");
	put("Hello", "World");

	print("\nGetting a Key-Value...");
	get("Hello");
	
	print("\nTry also store(count);...");
}

store(int count) {
	store(0, count, false);
}

store(int offset, int count, boolean randomize) {
	for(i = 0; i < count; i++) {
		String key = "Key-" + (offset + i);
		String value1 = "Value-" + (offset + i);
		
		int putIndex = current;
		int getIndex = current;
		
		if (randomize) {
			putIndex = (int)(dhts.size() * Math.random());
			getIndex = (int)(dhts.size() * Math.random());
		}
		
		put(dhts.get(putIndex), key, value1);
		
		Value value2 = get(dhts.get(getIndex), key);
		if (!value1.equals(value2.toString())) {
			//throw new IllegalStateException(value1 + ", " + value2);
		}
	}
}